import { createClient } from '@supabase/supabase-js'
const testData = {
    instructor_id: 1231232, // instructor_id is typically auto-generated by the database as it is a SERIAL type
    ubc_employee_num: 1234567890123,  // Example BIGINT for UBC employee number
    email: 'example@ubc.ca',  // Nullable field, example email provided
    prefix: 'Dr.',  // Nullable field, example prefix provided
    first_name: 'John',  // First name of the instructor
    last_name: 'Doe',  // Last name of the instructor
    suffix: null,  // Nullable field, no suffix provided
    title: 'Professor',  // Nullable field, example title provided
    hire_date: '2024-08-01'  // Nullable field, example hire date provided
  };
  

const supabase = createClient(process.env.SUPABASE_PUBLIC_URL, process.env.SERVICE_ROLE_KEY);

test('read_from_supabase_instructor', async () => {
  const { data, error } = await supabase.from("instructor").select();
  expect(data).not.toBeNull()
  expect(error).toBeNull()

})
test('read_from_no_exsist_supabase_instructor', async () => {
  const { data, error } = await supabase.from("no_exsist_instructor").select();
  expect(error).not.toBeNull()
  expect(data).toBeNull()

})

test('add a row', async () => {
  const res = await supabase.from("instructor").select();

  const { error } = await supabase
    .from('instructor')
    .insert(testData)
  expect(error).toBeNull()
  const res2 = await supabase.from("instructor").select();
  expect(res2.data.length - res.data.length).toBe(1) //check if a row really got added
  expect(res2.data.map((x) => { return x.instructor_id })).toContain(testData.instructor_id) //to see if the data is really there
})
test('delete a row', async () => {
  const res = await supabase.from("instructor").select();
  const { error } = await supabase
    .from('instructor')
    .delete()
    .eq('instructor_id', testData.instructor_id)
  expect(error).toBeNull()
  const res2 = await supabase.from("instructor").select();
  expect(res2.data.length - res.data.length).toBe(-1) //check if a row really got deleted
  expect(res2.data.map((x) => { return x.instructor_id })).not.toContain(testData.instructor_id) //to see if the data is really deleted
})


